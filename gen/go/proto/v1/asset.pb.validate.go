// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/v1/asset.proto

package protov1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BigInt with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BigInt) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BigInt with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BigIntMultiError, or nil if none found.
func (m *BigInt) ValidateAll() error {
	return m.validate(true)
}

func (m *BigInt) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return BigIntMultiError(errors)
	}

	return nil
}

// BigIntMultiError is an error wrapping multiple validation errors returned by
// BigInt.ValidateAll() if the designated constraints aren't met.
type BigIntMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BigIntMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BigIntMultiError) AllErrors() []error { return m }

// BigIntValidationError is the validation error returned by BigInt.Validate if
// the designated constraints aren't met.
type BigIntValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BigIntValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BigIntValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BigIntValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BigIntValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BigIntValidationError) ErrorName() string { return "BigIntValidationError" }

// Error satisfies the builtin error interface
func (e BigIntValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBigInt.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BigIntValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BigIntValidationError{}

// Validate checks the field values on AssetType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AssetType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AssetType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AssetTypeMultiError, or nil
// if none found.
func (m *AssetType) ValidateAll() error {
	return m.validate(true)
}

func (m *AssetType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Address

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetTypeValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetTypeValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetTypeValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChainId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AssetTypeValidationError{
					field:  "ChainId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AssetTypeValidationError{
					field:  "ChainId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChainId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AssetTypeValidationError{
				field:  "ChainId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AssetTypeMultiError(errors)
	}

	return nil
}

// AssetTypeMultiError is an error wrapping multiple validation errors returned
// by AssetType.ValidateAll() if the designated constraints aren't met.
type AssetTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AssetTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AssetTypeMultiError) AllErrors() []error { return m }

// AssetTypeValidationError is the validation error returned by
// AssetType.Validate if the designated constraints aren't met.
type AssetTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AssetTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AssetTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AssetTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AssetTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AssetTypeValidationError) ErrorName() string { return "AssetTypeValidationError" }

// Error satisfies the builtin error interface
func (e AssetTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAssetType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AssetTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AssetTypeValidationError{}

// Validate checks the field values on StakeType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StakeType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StakeType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StakeTypeMultiError, or nil
// if none found.
func (m *StakeType) ValidateAll() error {
	return m.validate(true)
}

func (m *StakeType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Address

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StakeTypeValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StakeTypeValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StakeTypeValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetChainId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StakeTypeValidationError{
					field:  "ChainId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StakeTypeValidationError{
					field:  "ChainId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetChainId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StakeTypeValidationError{
				field:  "ChainId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StakeTypeMultiError(errors)
	}

	return nil
}

// StakeTypeMultiError is an error wrapping multiple validation errors returned
// by StakeType.ValidateAll() if the designated constraints aren't met.
type StakeTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StakeTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StakeTypeMultiError) AllErrors() []error { return m }

// StakeTypeValidationError is the validation error returned by
// StakeType.Validate if the designated constraints aren't met.
type StakeTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StakeTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StakeTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StakeTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StakeTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StakeTypeValidationError) ErrorName() string { return "StakeTypeValidationError" }

// Error satisfies the builtin error interface
func (e StakeTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStakeType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StakeTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StakeTypeValidationError{}

// Validate checks the field values on LoanType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoanType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoanType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoanTypeMultiError, or nil
// if none found.
func (m *LoanType) ValidateAll() error {
	return m.validate(true)
}

func (m *LoanType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for Asset

	if all {
		switch v := interface{}(m.GetAmount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LoanTypeValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LoanTypeValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LoanTypeValidationError{
				field:  "Amount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Address

	// no validation rules for ChainId

	if len(errors) > 0 {
		return LoanTypeMultiError(errors)
	}

	return nil
}

// LoanTypeMultiError is an error wrapping multiple validation errors returned
// by LoanType.ValidateAll() if the designated constraints aren't met.
type LoanTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoanTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoanTypeMultiError) AllErrors() []error { return m }

// LoanTypeValidationError is the validation error returned by
// LoanType.Validate if the designated constraints aren't met.
type LoanTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoanTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoanTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoanTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoanTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoanTypeValidationError) ErrorName() string { return "LoanTypeValidationError" }

// Error satisfies the builtin error interface
func (e LoanTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoanType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoanTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoanTypeValidationError{}

// Validate checks the field values on ExtraData with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExtraData) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExtraData with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExtraDataMultiError, or nil
// if none found.
func (m *ExtraData) ValidateAll() error {
	return m.validate(true)
}

func (m *ExtraData) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPartiallyFillable()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ExtraDataValidationError{
					field:  "PartiallyFillable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ExtraDataValidationError{
					field:  "PartiallyFillable",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPartiallyFillable()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExtraDataValidationError{
				field:  "PartiallyFillable",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ExtraDataMultiError(errors)
	}

	return nil
}

// ExtraDataMultiError is an error wrapping multiple validation errors returned
// by ExtraData.ValidateAll() if the designated constraints aren't met.
type ExtraDataMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExtraDataMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExtraDataMultiError) AllErrors() []error { return m }

// ExtraDataValidationError is the validation error returned by
// ExtraData.Validate if the designated constraints aren't met.
type ExtraDataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExtraDataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExtraDataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExtraDataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExtraDataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExtraDataValidationError) ErrorName() string { return "ExtraDataValidationError" }

// Error satisfies the builtin error interface
func (e ExtraDataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExtraData.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExtraDataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExtraDataValidationError{}

// Validate checks the field values on Intent with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Intent) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Intent with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in IntentMultiError, or nil if none found.
func (m *Intent) ValidateAll() error {
	return m.validate(true)
}

func (m *Intent) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Sender

	if all {
		switch v := interface{}(m.GetExtraData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntentValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntentValidationError{
					field:  "ExtraData",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExtraData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntentValidationError{
				field:  "ExtraData",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntentValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntentValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetExpirationAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, IntentValidationError{
					field:  "ExpirationAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, IntentValidationError{
					field:  "ExpirationAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetExpirationAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return IntentValidationError{
				field:  "ExpirationAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.From.(type) {
	case *Intent_FromAsset:
		if v == nil {
			err := IntentValidationError{
				field:  "From",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFromAsset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "FromAsset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "FromAsset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFromAsset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntentValidationError{
					field:  "FromAsset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Intent_FromStake:
		if v == nil {
			err := IntentValidationError{
				field:  "From",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFromStake()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "FromStake",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "FromStake",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFromStake()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntentValidationError{
					field:  "FromStake",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Intent_FromLoan:
		if v == nil {
			err := IntentValidationError{
				field:  "From",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetFromLoan()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "FromLoan",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "FromLoan",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetFromLoan()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntentValidationError{
					field:  "FromLoan",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}
	switch v := m.To.(type) {
	case *Intent_ToAsset:
		if v == nil {
			err := IntentValidationError{
				field:  "To",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetToAsset()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "ToAsset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "ToAsset",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetToAsset()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntentValidationError{
					field:  "ToAsset",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Intent_ToStake:
		if v == nil {
			err := IntentValidationError{
				field:  "To",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetToStake()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "ToStake",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "ToStake",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetToStake()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntentValidationError{
					field:  "ToStake",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Intent_ToLoan:
		if v == nil {
			err := IntentValidationError{
				field:  "To",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetToLoan()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "ToLoan",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IntentValidationError{
						field:  "ToLoan",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetToLoan()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IntentValidationError{
					field:  "ToLoan",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return IntentMultiError(errors)
	}

	return nil
}

// IntentMultiError is an error wrapping multiple validation errors returned by
// Intent.ValidateAll() if the designated constraints aren't met.
type IntentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IntentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IntentMultiError) AllErrors() []error { return m }

// IntentValidationError is the validation error returned by Intent.Validate if
// the designated constraints aren't met.
type IntentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IntentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IntentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IntentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IntentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IntentValidationError) ErrorName() string { return "IntentValidationError" }

// Error satisfies the builtin error interface
func (e IntentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIntent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IntentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IntentValidationError{}

// Validate checks the field values on Body with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Body) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Body with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BodyMultiError, or nil if none found.
func (m *Body) ValidateAll() error {
	return m.validate(true)
}

func (m *Body) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetIntents() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BodyValidationError{
						field:  fmt.Sprintf("Intents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BodyValidationError{
						field:  fmt.Sprintf("Intents[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BodyValidationError{
					field:  fmt.Sprintf("Intents[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BodyMultiError(errors)
	}

	return nil
}

// BodyMultiError is an error wrapping multiple validation errors returned by
// Body.ValidateAll() if the designated constraints aren't met.
type BodyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BodyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BodyMultiError) AllErrors() []error { return m }

// BodyValidationError is the validation error returned by Body.Validate if the
// designated constraints aren't met.
type BodyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BodyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BodyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BodyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BodyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BodyValidationError) ErrorName() string { return "BodyValidationError" }

// Error satisfies the builtin error interface
func (e BodyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBody.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BodyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BodyValidationError{}
